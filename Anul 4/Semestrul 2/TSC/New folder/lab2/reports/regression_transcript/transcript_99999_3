# 0
# vsim +notimingchecks +nowarnTSCALE +NR_OF_TRANS=3 -sva -nocoverage -quiet -sv_seed 99999 -novopt top 
# //  ModelSim SE 6.6d Nov  1 2010 
# //
# //  Copyright 1991-2010 Mentor Graphics Corporation
# //              All Rights Reserved.
# //
# //  THIS WORK CONTAINS TRADE SECRET AND 
# //  PROPRIETARY INFORMATION WHICH IS THE PROPERTY
# //  OF MENTOR GRAPHICS CORPORATION OR ITS LICENSORS
# //  AND IS SUBJECT TO LICENSE TERMS.
# //
# ** Warning: (vsim-8441) ../lab01_testbench-interface/first_test.sv(89): Clocking block output arithmetic_if.cb.opcode is not legal in this
# or another expression.
#         Region: /instr_register_test_sv_unit
# ** Warning: (vsim-8441) ../lab01_testbench-interface/first_test.sv(90): Clocking block output arithmetic_if.cb.operand_a is not legal in this
# or another expression.
#         Region: /instr_register_test_sv_unit
# ** Warning: (vsim-8441) ../lab01_testbench-interface/first_test.sv(91): Clocking block output arithmetic_if.cb.operand_b is not legal in this
# or another expression.
#         Region: /instr_register_test_sv_unit
# ** Warning: (vsim-8441) ../lab01_testbench-interface/first_test.sv(88): Clocking block output arithmetic_if.cb.write_pointer is not legal in this
# or another expression.
#         Region: /instr_register_test_sv_unit
# ** Warning: (vsim-8441) ../lab01_testbench-interface/first_test.sv(95): Clocking block output arithmetic_if.cb.read_pointer is not legal in this
# or another expression.
#         Region: /instr_register_test_sv_unit
# 
# 
# ***********************************************************
# ***  THIS IS NOT A SELF-CHECKING TESTBENCH (YET).  YOU  ***
# ***  NEED TO VISUALLY VERIFY THAT THE OUTPUT VALUES     ***
# ***  MATCH THE INPUT VALUES FOR EACH REGISTER LOCATION  ***
# ***********************************************************
# 
# Reseting the instruction register...
# 
# Writing values to register stack...
# Writing to register location 0: 
#   opcode = 5 (MULT)
#   operand_a = 13
#   operand_b = 8
# 
# Writing to register location 1: 
#   opcode = 5 (MULT)
#   operand_a = 13
#   operand_b = 12
# 
# Writing to register location 2: 
#   opcode = 4 (SUB)
#   operand_a = 0
#   operand_b = 7
# 
# 
# Reading back the same register locations written...
# Read from register location 0: 
#   opcode = 5 (MULT)
#   operand_a = 13
#   operand_b = 8
#   result    = 1
# 
# ** Error: MULT operation error: Expected result = 104 Actual result = 1
# 
#    Time: 55 ns  Scope: instr_register_test_sv_unit.first_test.print_results File: ../lab01_testbench-interface/first_test.sv Line: 127
# Read from register location 1: 
#   opcode = 5 (MULT)
#   operand_a = 13
#   operand_b = 12
#   result    = 1
# 
# ** Error: MULT operation error: Expected result = 156 Actual result = 1
# 
#    Time: 65 ns  Scope: instr_register_test_sv_unit.first_test.print_results File: ../lab01_testbench-interface/first_test.sv Line: 127
# Read from register location 2: 
#   opcode = 4 (SUB)
#   operand_a = 0
#   operand_b = 7
#   result    = -7
# 
# 
# ***********************************************************
# ***  THIS IS NOT A SELF-CHECKING TESTBENCH (YET).  YOU  ***
# ***  NEED TO VISUALLY VERIFY THAT THE OUTPUT VALUES     ***
# ***  MATCH THE INPUT VALUES FOR EACH REGISTER LOCATION  ***
# ***********************************************************
# 
# TEST FAILED (2 errors)
# ** Note: $finish    : ../lab01_testbench-interface/first_test.sv(69)
#    Time: 80 ns  Iteration: 2  Instance: /top/test
